#include <iostream>
using namespace std;
//计数排序
 //begin 
 template<class T>
 void rank(T a[], int n, int r[])
 {
 	for(int i = 0; i< n;++i){
 		r[i] = 0;
	 }
	 for(int i = 1;i < n;++i){
		for(int j = 0;j < i; ++j){
			if(a[j] <= a[i]) r[i]++;
			else r[j]++;
		} 
	 } 
 }
 template<class T>
 void rearrange(T a[], int n,int r[])
 {
 	T* u = new T[n];
 	for(int i = 0;i < n;++i){
 		u[r[i]] = a[i];
	 }for(int i = 0;i< n;++i){
	 	a[i] = u[i];
	 }delete [] u;
 }
 //优化——原地重排
 template<class T>
 void in_place_rearrange(T a[], int n,int r[])
 {
 	for(int i = 0; i< n;++i){
 		while(r[i] != i){
 			int t = r[i];
 			swap(a[i], a[t]);
 			swap(r[i], r[t]);
		 }
	 }
  } 
 //end
 //选择排序
 //begin 
 template<class T>
 int indexOfMax(T a[], int n)
 {
 	if(n <= 0)
 		return -1;
 	int indexOfMax = 0;
 	for(int i = 1; i < n;++i)
 		if(a[indexOfMax] < a[i])
 			indexOfMax = i;
 	return indexOfMax;
 }
 template<class T>
 void selectionSort(T a[], int n)
 {
 	for(int size = n;size > 1;size--){
 		int j = indexOfMax(a, size);
 		swap(a[j],a[size -1]);
	 }
  } 
//优化——及时终止的选排
template<class T>
void n_selectionSort(T a[], int n)
{
	bool sorted = false;
	for(int size = n; !sorted && (size > 1);--size){
		int indexOfMax = 0;
		sorted = true;
		for(int i = 1; i < size; ++i)
			if(a[indexOfMax] <= a[i]) indexOfMax = i;
			else sorted = false;
		swap(a[indexOfMax], a[size - 1]);	
	}
 } 
  //end
//冒泡排序
//begin
template<class T>
void bubble(T a[], int n)
{
	for(int i = 0; i<n - 1;++i){
		if(a[i] > a[i+1])
			swap(a[i], a[i+1]);
	}
}
template<class T>
void bubbleSort(T a[], int n)
{
	for(int i = n;i>1;--i)
		bubble(a, i);
}
//优化——及时终止的冒泡排序
template<class T>
bool n_bubble(T a[], int n)
{
	bool swapped = false;
	for(int i = 0; i < n-1 ;++i){
		if(a[i] > a[i+1]){
			swap(a[i], a[i+1]);
			swapped = true;
		}
	}return swapped;
 } 
 template<class T>
 void n_bubbleSort(T a[], int n){
 	for(int i = n; i > 1 && n_bubble(a,i); i--);
 }
//end 
//有序数组插入一个元素
//begin
template<class T>
void insert_one(T a[], int& n, const T& x)
{
	int i;
	for(i = n -1;i >=0 && a[i] < x; --i){
		a[i+1] = a[i];
	}a[i + 1] = x;
	++n;
}
//end 
//插入排序
//begin
template<class T>
void insert(T a[], int& n, const T& x)
{
	int i;
	for(i = n -1;i >=0 && a[i] < x; --i){
		a[i+1] = a[i];
	}a[i + 1] = x;
}
template<class T>
void insertionSort(T a[], int n)
{
	for(int i = 1; i < n;++i){
		T t = a[i];
		insert(a, i, t);
	}
}
template<class T>
void insertionSort_2(T a[], int n)
{
	for(int i = 1; i < n; ++i)
	{
		T t = a[i];
		int j;
		for(j = i -1; j >= 0 && t < a[j]; j--)
			a[j + 1] = a[j];
		a[j + 1] = t;
	}
}
//end 
//快速排序
//begin
template<class T>
void qksort(T list[],int left_position,int right_position)
{
	T pivot;
	int i,j;
	if(right_position>left_position){
		pivot = list[right_position];
		i = left_position-1;
		j = right_position;
	while(1)
	{
		while(list[++i]<pivot);
		while(list[--j]>pivot);
		if(i>=j)break;
		swap(list[i],list[j]);
	}swap(list[i],list[right_position]);
	qksort(list,left_position,i-1);
	qksort(list,i+1,right_position);
	}
}
//end 
//合并排序
//begin
template<class T>
void mergesort(T list[],int lo,int hi,T a[],T b[])
{
	if(lo>=hi) return;
	int mid = lo+(hi-lo)/2;
	mergesort(list,lo,mid,a,b);
	mergesort(list,mid+1,hi,a,b);
	for(int k=lo;k<=mid;++k)
		a[k-lo] = list[k];
	for(int k = mid+1;k<=hi;++k)
		b[k-mid-1] = list[k];
	a[mid-lo+1] = 98+1;//MAX_OF_LIST+1
	b[hi-mid] = 98+1;//MAX_OF_LIST+1
	int i=0,j=0;
	for(int k=lo;k<=hi;k++){
		if(b[j]<a[i])	list[k] = b[j++];
		else	list[k]=a[i++];
	}
 } 
